/*
 * OpenProject API V3 (Stable)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageFilesModelParent {
    /// Linked file's id on the origin
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<serde_json::Value>,
    /// Linked file's name on the origin
    #[serde(rename = "name", deserialize_with = "Option::deserialize")]
    pub name: Option<serde_json::Value>,
    /// MIME type of the linked file.  To link a folder entity, the custom MIME type `application/x-op-directory` MUST be provided. Otherwise it defaults back to an unknown MIME type.
    #[serde(
        rename = "mimeType",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub mime_type: Option<Option<serde_json::Value>>,
    /// file size on origin in bytes
    #[serde(
        rename = "size",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub size: Option<Option<serde_json::Value>>,
    /// Timestamp of the creation datetime of the file on the origin
    #[serde(
        rename = "createdAt",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub created_at: Option<Option<serde_json::Value>>,
    /// Timestamp of the datetime of the last modification of the file on the origin
    #[serde(
        rename = "lastModifiedAt",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_at: Option<Option<serde_json::Value>>,
    /// Display name of the author that created the file on the origin
    #[serde(
        rename = "createdByName",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub created_by_name: Option<Option<serde_json::Value>>,
    /// Display name of the author that modified the file on the origin last
    #[serde(
        rename = "lastModifiedByName",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_by_name: Option<Option<serde_json::Value>>,
    #[serde(rename = "_type", deserialize_with = "Option::deserialize")]
    pub _type: Option<Type>,
    /// Location identification for file in storage
    #[serde(rename = "location", deserialize_with = "Option::deserialize")]
    pub location: Option<serde_json::Value>,
    #[serde(rename = "_links")]
    pub _links: Box<models::StorageFileModelAllOfLinks>,
}

impl StorageFilesModelParent {
    pub fn new(
        id: Option<serde_json::Value>,
        name: Option<serde_json::Value>,
        _type: Option<Type>,
        location: Option<serde_json::Value>,
        _links: models::StorageFileModelAllOfLinks,
    ) -> StorageFilesModelParent {
        StorageFilesModelParent {
            id,
            name,
            mime_type: None,
            size: None,
            created_at: None,
            last_modified_at: None,
            created_by_name: None,
            last_modified_by_name: None,
            _type,
            location,
            _links: Box::new(_links),
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "StorageFile")]
    StorageFile,
}

impl Default for Type {
    fn default() -> Type {
        Self::StorageFile
    }
}
