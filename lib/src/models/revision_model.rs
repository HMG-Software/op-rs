/*
 * OpenProject API V3 (Stable)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RevisionModel {
    /// Revision's id, assigned by OpenProject
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The raw SCM identifier of the revision (e.g. full SHA hash)
    #[serde(rename = "identifier")]
    pub identifier: String,
    /// The SCM identifier of the revision, formatted (e.g. shortened unambiguous SHA hash). May be identical to identifier in many cases
    #[serde(rename = "formattedIdentifier")]
    pub formatted_identifier: String,
    /// The name of the author that committed this revision. Note that this name is retrieved from the repository and does not identify a user in OpenProject.
    #[serde(rename = "authorName")]
    pub author_name: String,
    #[serde(rename = "message")]
    pub message: Box<models::Formattable>,
    /// The time this revision was committed to the repository
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "_links", skip_serializing_if = "Option::is_none")]
    pub _links: Option<Box<models::RevisionModelLinks>>,
}

impl RevisionModel {
    pub fn new(
        identifier: String,
        formatted_identifier: String,
        author_name: String,
        message: models::Formattable,
        created_at: String,
    ) -> RevisionModel {
        RevisionModel {
            id: None,
            identifier,
            formatted_identifier,
            author_name,
            message: Box::new(message),
            created_at,
            _links: None,
        }
    }
}
