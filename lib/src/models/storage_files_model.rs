/*
 * OpenProject API V3 (Stable)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageFilesModel {
    #[serde(rename = "_type")]
    pub _type: Type,
    /// List of files provided by the selected storage.
    #[serde(rename = "files")]
    pub files: Vec<models::StorageFileModel>,
    #[serde(rename = "parent")]
    pub parent: Box<models::StorageFilesModelParent>,
    /// List of ancestors of the parent directory. Can be empty, if parent directory was root directory.
    #[serde(rename = "ancestors")]
    pub ancestors: Vec<models::StorageFileModel>,
    #[serde(rename = "_links")]
    pub _links: Box<models::StorageFileModelAllOfLinks>,
}

impl StorageFilesModel {
    pub fn new(
        _type: Type,
        files: Vec<models::StorageFileModel>,
        parent: models::StorageFilesModelParent,
        ancestors: Vec<models::StorageFileModel>,
        _links: models::StorageFileModelAllOfLinks,
    ) -> StorageFilesModel {
        StorageFilesModel {
            _type,
            files,
            parent: Box::new(parent),
            ancestors,
            _links: Box::new(_links),
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "StorageFiles")]
    StorageFiles,
}

impl Default for Type {
    fn default() -> Type {
        Self::StorageFiles
    }
}
