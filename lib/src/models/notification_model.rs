/*
 * OpenProject API V3 (Stable)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationModel {
    #[serde(rename = "_type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// Notification id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The reason for the notification
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<Reason>,
    /// Whether the notification is marked as read
    #[serde(rename = "readIAN", skip_serializing_if = "Option::is_none")]
    pub read_ian: Option<bool>,
    /// A list of objects including detailed information about the notification.
    #[serde(rename = "details", skip_serializing_if = "Option::is_none")]
    pub details: Option<Vec<models::NotificationModelDetailsInner>>,
    /// The time the notification was created at
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// The time the notification was last updated
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "_embedded", skip_serializing_if = "Option::is_none")]
    pub _embedded: Option<Box<models::NotificationModelEmbedded>>,
    #[serde(rename = "_links", skip_serializing_if = "Option::is_none")]
    pub _links: Option<Box<models::NotificationModelLinks>>,
}

impl NotificationModel {
    pub fn new() -> NotificationModel {
        NotificationModel {
            _type: None,
            id: None,
            reason: None,
            read_ian: None,
            details: None,
            created_at: None,
            updated_at: None,
            _embedded: None,
            _links: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Notification")]
    Notification,
}

impl Default for Type {
    fn default() -> Type {
        Self::Notification
    }
}
/// The reason for the notification
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Reason {
    #[serde(rename = "assigned")]
    Assigned,
    #[serde(rename = "commented")]
    Commented,
    #[serde(rename = "created")]
    Created,
    #[serde(rename = "dateAlert")]
    DateAlert,
    #[serde(rename = "mentioned")]
    Mentioned,
    #[serde(rename = "prioritized")]
    Prioritized,
    #[serde(rename = "processed")]
    Processed,
    #[serde(rename = "responsible")]
    Responsible,
    #[serde(rename = "subscribed")]
    Subscribed,
    #[serde(rename = "scheduled")]
    Scheduled,
    #[serde(rename = "watched")]
    Watched,
}

impl Default for Reason {
    fn default() -> Reason {
        Self::Assigned
    }
}
