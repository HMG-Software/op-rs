/*
 * OpenProject API V3 (Stable)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StatusModel {
    #[serde(rename = "_type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// Status id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Status name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Sort index of the status
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<i32>,
    #[serde(rename = "isDefault", skip_serializing_if = "Option::is_none")]
    pub is_default: Option<bool>,
    /// are tickets of this status considered closed?
    #[serde(rename = "isClosed", skip_serializing_if = "Option::is_none")]
    pub is_closed: Option<bool>,
    /// are tickets of this status read only?
    #[serde(rename = "isReadonly", skip_serializing_if = "Option::is_none")]
    pub is_readonly: Option<bool>,
    /// The percentageDone being applied when changing to this status
    #[serde(rename = "defaultDoneRatio", skip_serializing_if = "Option::is_none")]
    pub default_done_ratio: Option<i32>,
    #[serde(rename = "_links", skip_serializing_if = "Option::is_none")]
    pub _links: Option<Box<models::StatusModelLinks>>,
}

impl StatusModel {
    pub fn new() -> StatusModel {
        StatusModel {
            _type: None,
            id: None,
            name: None,
            position: None,
            is_default: None,
            is_closed: None,
            is_readonly: None,
            default_done_ratio: None,
            _links: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Status")]
    Status,
}

impl Default for Type {
    fn default() -> Type {
        Self::Status
    }
}
