/*
 * OpenProject API V3 (Stable)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkPackageModelLinks {
    #[serde(rename = "addAttachment", skip_serializing_if = "Option::is_none")]
    pub add_attachment: Option<Box<models::WorkPackageModelLinksAddAttachment>>,
    #[serde(rename = "addComment", skip_serializing_if = "Option::is_none")]
    pub add_comment: Option<Box<models::WorkPackageModelLinksAddComment>>,
    #[serde(rename = "addRelation", skip_serializing_if = "Option::is_none")]
    pub add_relation: Option<Box<models::WorkPackageModelLinksAddRelation>>,
    #[serde(rename = "addWatcher", skip_serializing_if = "Option::is_none")]
    pub add_watcher: Option<Box<models::WorkPackageModelLinksAddWatcher>>,
    #[serde(rename = "customActions", skip_serializing_if = "Option::is_none")]
    pub custom_actions: Option<Vec<models::WorkPackageModelLinksCustomActionsInner>>,
    #[serde(rename = "previewMarkup", skip_serializing_if = "Option::is_none")]
    pub preview_markup: Option<Box<models::WorkPackageModelLinksPreviewMarkup>>,
    #[serde(rename = "removeWatcher", skip_serializing_if = "Option::is_none")]
    pub remove_watcher: Option<Box<models::WorkPackageModelLinksRemoveWatcher>>,
    #[serde(rename = "unwatch", skip_serializing_if = "Option::is_none")]
    pub unwatch: Option<Box<models::WorkPackageModelLinksUnwatch>>,
    #[serde(rename = "update", skip_serializing_if = "Option::is_none")]
    pub update: Option<Box<models::WorkPackageModelLinksUpdate>>,
    #[serde(rename = "updateImmediately", skip_serializing_if = "Option::is_none")]
    pub update_immediately: Option<Box<models::WorkPackageModelLinksUpdateImmediately>>,
    #[serde(rename = "watch", skip_serializing_if = "Option::is_none")]
    pub watch: Option<Box<models::WorkPackageModelLinksWatch>>,
    #[serde(rename = "self")]
    pub param_self: Box<models::WorkPackageModelLinksSelf>,
    #[serde(rename = "schema")]
    pub schema: Box<models::WorkPackageModelLinksSchema>,
    #[serde(rename = "ancestors")]
    pub ancestors: Vec<models::WorkPackageModelLinksAncestorsInner>,
    #[serde(rename = "attachments")]
    pub attachments: Box<models::WorkPackageModelLinksAttachments>,
    #[serde(rename = "author")]
    pub author: Box<models::WorkPackageModelLinksAuthor>,
    #[serde(rename = "assignee", skip_serializing_if = "Option::is_none")]
    pub assignee: Option<Box<models::WorkPackageModelLinksAssignee>>,
    #[serde(rename = "availableWatchers", skip_serializing_if = "Option::is_none")]
    pub available_watchers: Option<Box<models::WorkPackageModelLinksAvailableWatchers>>,
    #[serde(rename = "budget", skip_serializing_if = "Option::is_none")]
    pub budget: Option<Box<models::WorkPackageModelLinksBudget>>,
    #[serde(rename = "category", skip_serializing_if = "Option::is_none")]
    pub category: Option<Box<models::WorkPackageModelLinksCategory>>,
    #[serde(rename = "children")]
    pub children: Vec<models::WorkPackageModelLinksChildrenInner>,
    #[serde(rename = "addFileLink", skip_serializing_if = "Option::is_none")]
    pub add_file_link: Option<Box<models::WorkPackageModelLinksAddFileLink>>,
    #[serde(rename = "fileLinks", skip_serializing_if = "Option::is_none")]
    pub file_links: Option<Box<models::WorkPackageModelLinksFileLinks>>,
    #[serde(rename = "parent", skip_serializing_if = "Option::is_none")]
    pub parent: Option<Box<models::WorkPackageModelLinksParent>>,
    #[serde(rename = "priority")]
    pub priority: Box<models::WorkPackageModelLinksPriority>,
    #[serde(rename = "project")]
    pub project: Box<models::WorkPackageModelLinksProject>,
    #[serde(rename = "responsible", skip_serializing_if = "Option::is_none")]
    pub responsible: Option<Box<models::WorkPackageModelLinksResponsible>>,
    #[serde(rename = "relations", skip_serializing_if = "Option::is_none")]
    pub relations: Option<Box<models::WorkPackageModelLinksRelations>>,
    #[serde(rename = "revisions", skip_serializing_if = "Option::is_none")]
    pub revisions: Option<Box<models::WorkPackageModelLinksRevisions>>,
    #[serde(rename = "status")]
    pub status: Box<models::WorkPackageModelLinksStatus>,
    #[serde(rename = "timeEntries", skip_serializing_if = "Option::is_none")]
    pub time_entries: Option<Box<models::WorkPackageModelLinksTimeEntries>>,
    #[serde(rename = "type")]
    pub r#type: Box<models::WorkPackageModelLinksType>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<Box<models::WorkPackageModelLinksVersion>>,
    #[serde(rename = "watchers", skip_serializing_if = "Option::is_none")]
    pub watchers: Option<Box<models::WorkPackageModelLinksWatchers>>,
}

impl WorkPackageModelLinks {
    pub fn new(
        param_self: models::WorkPackageModelLinksSelf,
        schema: models::WorkPackageModelLinksSchema,
        ancestors: Vec<models::WorkPackageModelLinksAncestorsInner>,
        attachments: models::WorkPackageModelLinksAttachments,
        author: models::WorkPackageModelLinksAuthor,
        children: Vec<models::WorkPackageModelLinksChildrenInner>,
        priority: models::WorkPackageModelLinksPriority,
        project: models::WorkPackageModelLinksProject,
        status: models::WorkPackageModelLinksStatus,
        r#type: models::WorkPackageModelLinksType,
    ) -> WorkPackageModelLinks {
        WorkPackageModelLinks {
            add_attachment: None,
            add_comment: None,
            add_relation: None,
            add_watcher: None,
            custom_actions: None,
            preview_markup: None,
            remove_watcher: None,
            unwatch: None,
            update: None,
            update_immediately: None,
            watch: None,
            param_self: Box::new(param_self),
            schema: Box::new(schema),
            ancestors,
            attachments: Box::new(attachments),
            author: Box::new(author),
            assignee: None,
            available_watchers: None,
            budget: None,
            category: None,
            children,
            add_file_link: None,
            file_links: None,
            parent: None,
            priority: Box::new(priority),
            project: Box::new(project),
            responsible: None,
            relations: None,
            revisions: None,
            status: Box::new(status),
            time_entries: None,
            r#type: Box::new(r#type),
            version: None,
            watchers: None,
        }
    }
}
