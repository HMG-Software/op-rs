/*
 * OpenProject API V3 (Stable)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProjectModel {
    #[serde(rename = "_type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// Projects' id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "identifier", skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Indicates whether the project is currently active or already archived
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(rename = "statusExplanation", skip_serializing_if = "Option::is_none")]
    pub status_explanation: Option<Box<models::Formattable>>,
    /// Indicates whether the project is accessible for everybody
    #[serde(rename = "public", skip_serializing_if = "Option::is_none")]
    pub public: Option<bool>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<Box<models::Formattable>>,
    /// Time of creation
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Time of the most recent change to the project
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "_links", skip_serializing_if = "Option::is_none")]
    pub _links: Option<Box<models::ProjectModelLinks>>,
}

impl ProjectModel {
    pub fn new() -> ProjectModel {
        ProjectModel {
            _type: None,
            id: None,
            identifier: None,
            name: None,
            active: None,
            status_explanation: None,
            public: None,
            description: None,
            created_at: None,
            updated_at: None,
            _links: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Project")]
    Project,
}

impl Default for Type {
    fn default() -> Type {
        Self::Project
    }
}
