/*
 * OpenProject API V3 (Stable)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OAuthApplicationReadModel {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "_type")]
    pub _type: Type,
    /// The name of the OAuth 2 application
    #[serde(rename = "name")]
    pub name: String,
    /// OAuth 2 client id
    #[serde(rename = "clientId")]
    pub client_id: String,
    /// OAuth 2 client secret. This is only returned when creating a new OAuth application.
    #[serde(rename = "clientSecret", skip_serializing_if = "Option::is_none")]
    pub client_secret: Option<String>,
    /// true, if OAuth 2 credentials are confidential, false, if no secret is stored
    #[serde(rename = "confidential")]
    pub confidential: bool,
    /// The time the OAuth 2 Application was created at
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// The time the OAuth 2 Application was last updated
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// An array of the scopes of the OAuth 2 Application
    #[serde(rename = "scopes", skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    #[serde(rename = "_links", skip_serializing_if = "Option::is_none")]
    pub _links: Option<Box<models::OAuthApplicationReadModelLinks>>,
}

impl OAuthApplicationReadModel {
    pub fn new(
        id: i32,
        _type: Type,
        name: String,
        client_id: String,
        confidential: bool,
    ) -> OAuthApplicationReadModel {
        OAuthApplicationReadModel {
            id,
            _type,
            name,
            client_id,
            client_secret: None,
            confidential,
            created_at: None,
            updated_at: None,
            scopes: None,
            _links: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "OAuthApplication")]
    OAuthApplication,
}

impl Default for Type {
    fn default() -> Type {
        Self::OAuthApplication
    }
}
