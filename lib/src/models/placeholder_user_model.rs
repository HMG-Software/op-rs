/*
 * OpenProject API V3 (Stable)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlaceholderUserModel {
    #[serde(rename = "_type")]
    pub _type: Type,
    /// The principal's unique identifier.
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<serde_json::Value>,
    /// The principal's display name, layout depends on instance settings.
    #[serde(rename = "name", deserialize_with = "Option::deserialize")]
    pub name: Option<serde_json::Value>,
    /// Time of creation
    #[serde(
        rename = "createdAt",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub created_at: Option<Option<serde_json::Value>>,
    /// Time of the most recent change to the principal
    #[serde(
        rename = "updatedAt",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub updated_at: Option<Option<serde_json::Value>>,
    #[serde(rename = "_links")]
    pub _links: Box<models::PlaceholderUserModelAllOfLinks>,
    /// The current activation status of the placeholder user.  # Conditions  - User has `manage_placeholder_user` permission globally
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

impl PlaceholderUserModel {
    pub fn new(
        _type: Type,
        id: Option<serde_json::Value>,
        name: Option<serde_json::Value>,
        _links: models::PlaceholderUserModelAllOfLinks,
    ) -> PlaceholderUserModel {
        PlaceholderUserModel {
            _type,
            id,
            name,
            created_at: None,
            updated_at: None,
            _links: Box::new(_links),
            status: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "PlaceholderUser")]
    PlaceholderUser,
}

impl Default for Type {
    fn default() -> Type {
        Self::PlaceholderUser
    }
}
