/*
 * OpenProject API V3 (Stable)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DayModel {
    #[serde(rename = "_type")]
    pub _type: Type,
    /// Date of the day.
    #[serde(rename = "date")]
    pub date: String,
    /// Descriptive name for the day.
    #[serde(rename = "name")]
    pub name: String,
    /// `true` for a working day, `false` otherwise.
    #[serde(rename = "working")]
    pub working: bool,
    #[serde(rename = "_links", skip_serializing_if = "Option::is_none")]
    pub _links: Option<Box<models::DayModelLinks>>,
}

impl DayModel {
    pub fn new(_type: Type, date: String, name: String, working: bool) -> DayModel {
        DayModel {
            _type,
            date,
            name,
            working,
            _links: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Day")]
    Day,
}

impl Default for Type {
    fn default() -> Type {
        Self::Day
    }
}
