/*
 * OpenProject API V3 (Stable)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct HelpTextModel {
    #[serde(rename = "_type")]
    pub _type: Type,
    #[serde(rename = "id")]
    pub id: i64,
    /// The attribute the help text is assigned to.
    #[serde(rename = "attribute")]
    pub attribute: String,
    #[serde(rename = "scope")]
    pub scope: Scope,
    #[serde(rename = "helpText")]
    pub help_text: Box<models::Formattable>,
    #[serde(rename = "_links")]
    pub _links: Box<models::HelpTextModelLinks>,
}

impl HelpTextModel {
    pub fn new(
        _type: Type,
        id: i64,
        attribute: String,
        scope: Scope,
        help_text: models::Formattable,
        _links: models::HelpTextModelLinks,
    ) -> HelpTextModel {
        HelpTextModel {
            _type,
            id,
            attribute,
            scope,
            help_text: Box::new(help_text),
            _links: Box::new(_links),
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "HelpText")]
    HelpText,
}

impl Default for Type {
    fn default() -> Type {
        Self::HelpText
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Scope {
    #[serde(rename = "WorkPackage")]
    WorkPackage,
    #[serde(rename = "Project")]
    Project,
}

impl Default for Scope {
    fn default() -> Scope {
        Self::WorkPackage
    }
}
