/*
 * OpenProject API V3 (Stable)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PrincipalCollectionModelAllOfEmbeddedElementsInner {
    #[serde(rename = "_type", deserialize_with = "Option::deserialize")]
    pub _type: Option<Type>,
    /// The principal's unique identifier.
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<serde_json::Value>,
    /// The principal's display name, layout depends on instance settings.
    #[serde(rename = "name", deserialize_with = "Option::deserialize")]
    pub name: Option<serde_json::Value>,
    /// Time of creation
    #[serde(
        rename = "createdAt",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub created_at: Option<Option<serde_json::Value>>,
    /// Time of the most recent change to the principal
    #[serde(
        rename = "updatedAt",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub updated_at: Option<Option<serde_json::Value>>,
    #[serde(rename = "_links")]
    pub _links: Box<models::PlaceholderUserModelAllOfLinks>,
    /// URL to user's avatar
    #[serde(rename = "avatar", deserialize_with = "Option::deserialize")]
    pub avatar: Option<serde_json::Value>,
    /// The user's login name  # Conditions  - User is self, or `create_user` or `manage_user` permission globally
    #[serde(
        rename = "login",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub login: Option<Option<serde_json::Value>>,
    /// The user's first name  # Conditions  - User is self, or `create_user` or `manage_user` permission globally
    #[serde(
        rename = "firstName",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub first_name: Option<Option<serde_json::Value>>,
    /// The user's last name  # Conditions  - User is self, or `create_user` or `manage_user` permission globally
    #[serde(
        rename = "lastName",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_name: Option<Option<serde_json::Value>>,
    /// The user's email address  # Conditions  - E-Mail address not hidden - User is not a new record - User is self, or `create_user` or `manage_user` permission globally
    #[serde(
        rename = "email",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub email: Option<Option<serde_json::Value>>,
    /// Flag indicating whether or not the user is an admin  # Conditions  - `admin`
    #[serde(
        rename = "admin",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub admin: Option<Option<serde_json::Value>>,
    /// The current activation status of the placeholder user.  # Conditions  - User has `manage_placeholder_user` permission globally
    #[serde(
        rename = "status",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub status: Option<Option<serde_json::Value>>,
    /// User's language | ISO 639-1 format  # Conditions  - User is self, or `create_user` or `manage_user` permission globally
    #[serde(
        rename = "language",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub language: Option<Option<serde_json::Value>>,
    /// User's identity_url for OmniAuth authentication.  # Conditions  - User is self, or `create_user` or `manage_user` permission globally
    #[serde(
        rename = "identityUrl",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub identity_url: Option<Option<serde_json::Value>>,
}

impl PrincipalCollectionModelAllOfEmbeddedElementsInner {
    pub fn new(
        _type: Option<Type>,
        id: Option<serde_json::Value>,
        name: Option<serde_json::Value>,
        _links: models::PlaceholderUserModelAllOfLinks,
        avatar: Option<serde_json::Value>,
    ) -> PrincipalCollectionModelAllOfEmbeddedElementsInner {
        PrincipalCollectionModelAllOfEmbeddedElementsInner {
            _type,
            id,
            name,
            created_at: None,
            updated_at: None,
            _links: Box::new(_links),
            avatar,
            login: None,
            first_name: None,
            last_name: None,
            email: None,
            admin: None,
            status: None,
            language: None,
            identity_url: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "PlaceholderUser")]
    PlaceholderUser,
}

impl Default for Type {
    fn default() -> Type {
        Self::PlaceholderUser
    }
}
