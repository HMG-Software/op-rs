/*
 * OpenProject API V3 (Stable)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AttachmentModel {
    /// Attachment's id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The name of the file
    #[serde(rename = "title")]
    pub title: String,
    /// The name of the uploaded file
    #[serde(rename = "fileName")]
    pub file_name: String,
    /// The size of the uploaded file in Bytes
    #[serde(rename = "fileSize", skip_serializing_if = "Option::is_none")]
    pub file_size: Option<i32>,
    #[serde(rename = "description")]
    pub description: Box<models::Formattable>,
    /// The files MIME-Type as determined by the server
    #[serde(rename = "contentType")]
    pub content_type: String,
    /// A checksum for the files content
    #[serde(rename = "digest")]
    pub digest: String,
    /// Time of creation
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "_links", skip_serializing_if = "Option::is_none")]
    pub _links: Option<Box<models::AttachmentModelLinks>>,
}

impl AttachmentModel {
    pub fn new(
        title: String,
        file_name: String,
        description: models::Formattable,
        content_type: String,
        digest: String,
        created_at: String,
    ) -> AttachmentModel {
        AttachmentModel {
            id: None,
            title,
            file_name,
            file_size: None,
            description: Box::new(description),
            content_type,
            digest,
            created_at,
            _links: None,
        }
    }
}
