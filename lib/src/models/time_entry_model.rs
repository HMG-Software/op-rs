/*
 * OpenProject API V3 (Stable)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimeEntryModel {
    /// The id of the time entry
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<Box<models::Formattable>>,
    /// The date the expenditure is booked for
    #[serde(rename = "spentOn", skip_serializing_if = "Option::is_none")]
    pub spent_on: Option<String>,
    /// The time quantifying the expenditure
    #[serde(rename = "hours", skip_serializing_if = "Option::is_none")]
    pub hours: Option<String>,
    /// Whether the time entry is actively tracking time
    #[serde(rename = "ongoing", skip_serializing_if = "Option::is_none")]
    pub ongoing: Option<bool>,
    /// The time the time entry was created
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// The time the time entry was last updated
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "_links", skip_serializing_if = "Option::is_none")]
    pub _links: Option<Box<models::TimeEntryModelLinks>>,
}

impl TimeEntryModel {
    pub fn new() -> TimeEntryModel {
        TimeEntryModel {
            id: None,
            comment: None,
            spent_on: None,
            hours: None,
            ongoing: None,
            created_at: None,
            updated_at: None,
            _links: None,
        }
    }
}
