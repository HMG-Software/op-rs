/*
 * OpenProject API V3 (Stable)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PaginatedCollectionModel {
    #[serde(rename = "_type", deserialize_with = "Option::deserialize")]
    pub _type: Option<Type>,
    /// The total amount of elements available in the collection.
    #[serde(rename = "total", deserialize_with = "Option::deserialize")]
    pub total: Option<serde_json::Value>,
    /// Actual amount of elements in this response.
    #[serde(rename = "count", deserialize_with = "Option::deserialize")]
    pub count: Option<serde_json::Value>,
    #[serde(rename = "_links")]
    pub _links: Box<models::PaginatedCollectionModelAllOfLinks>,
    /// Amount of elements that a response will hold.
    #[serde(rename = "pageSize")]
    pub page_size: i32,
    /// The page number that is requested from paginated collection.
    #[serde(rename = "offset")]
    pub offset: i32,
}

impl PaginatedCollectionModel {
    pub fn new(
        _type: Option<Type>,
        total: Option<serde_json::Value>,
        count: Option<serde_json::Value>,
        _links: models::PaginatedCollectionModelAllOfLinks,
        page_size: i32,
        offset: i32,
    ) -> PaginatedCollectionModel {
        PaginatedCollectionModel {
            _type,
            total,
            count,
            _links: Box::new(_links),
            page_size,
            offset,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Collection")]
    Collection,
}

impl Default for Type {
    fn default() -> Type {
        Self::Collection
    }
}
