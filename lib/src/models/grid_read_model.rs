/*
 * OpenProject API V3 (Stable)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GridReadModel {
    #[serde(rename = "_type")]
    pub _type: Type,
    /// Grid's id
    #[serde(rename = "id")]
    pub id: i32,
    /// The number of rows the grid has
    #[serde(rename = "rowCount")]
    pub row_count: i32,
    /// The number of columns the grid has
    #[serde(rename = "columnCount")]
    pub column_count: i32,
    /// The set of `GridWidget`s selected for the grid.  # Conditions  - The widgets must not overlap.
    #[serde(rename = "widgets")]
    pub widgets: Vec<models::GridWidgetModel>,
    /// The time the grid was created.
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// The time the grid was last updated.
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "_links")]
    pub _links: Box<models::GridReadModelLinks>,
}

impl GridReadModel {
    pub fn new(
        _type: Type,
        id: i32,
        row_count: i32,
        column_count: i32,
        widgets: Vec<models::GridWidgetModel>,
        _links: models::GridReadModelLinks,
    ) -> GridReadModel {
        GridReadModel {
            _type,
            id,
            row_count,
            column_count,
            widgets,
            created_at: None,
            updated_at: None,
            _links: Box::new(_links),
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Grid")]
    Grid,
}

impl Default for Type {
    fn default() -> Type {
        Self::Grid
    }
}
