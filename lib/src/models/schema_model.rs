/*
 * OpenProject API V3 (Stable)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SchemaModel {
    #[serde(rename = "_type")]
    pub _type: Type,
    /// A list of dependencies between one property's value and another property
    #[serde(rename = "_dependencies", skip_serializing_if = "Option::is_none")]
    pub _dependencies: Option<Vec<String>>,
    #[serde(rename = "_links")]
    pub _links: Box<models::SchemaModelLinks>,
}

impl SchemaModel {
    pub fn new(_type: Type, _links: models::SchemaModelLinks) -> SchemaModel {
        SchemaModel {
            _type,
            _dependencies: None,
            _links: Box::new(_links),
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Schema")]
    Schema,
}

impl Default for Type {
    fn default() -> Type {
        Self::Schema
    }
}
